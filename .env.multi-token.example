# Warp2Api 多Token配置示例
# 此文件展示如何配置多个refresh token以实现负载均衡和故障转移

# ==================== 基础配置 ====================
# Warp2Api 配置
W2A_VERBOSE=false

# Bridge服务器URL配置
WARP_BRIDGE_URL=http://127.0.0.1:28888

# API Token认证 - 用于保护对外接口
API_TOKEN=0000

# 网络代理配置
HTTP_PROXY=
HTTPS_PROXY=
NO_PROXY=127.0.0.1,localhost

# ==================== 多Token配置（核心功能） ====================

# 方案1: 单个个人token（最简单）
# 适用场景：只有一个个人账号
WARP_REFRESH_TOKEN=your_personal_refresh_token_here

# 方案2: 多个个人tokens（推荐）
# 适用场景：有多个个人账号，希望轮换使用以分散负载
# 配置多个token，用逗号分隔（不要有空格）
# WARP_PERSONAL_TOKENS=AMf-vBxSRmdh...,AMf-vBxSRmdh...,AMf-vBxSRmdh...

# 方案3: 个人 + 共享 + 匿名（完整配置，最佳实践）
# 适用场景：团队使用，需要高可用性和负载均衡

# 个人tokens（最高优先级）- 优先使用
# 这些token会被优先选择，适合个人专用账号
# WARP_REFRESH_TOKEN=your_personal_token_1
# WARP_PERSONAL_TOKENS=personal_token_2,personal_token_3

# 共享tokens（中等优先级）- 个人token失败后使用
# 团队共享的tokens，当个人token都失败时才会使用
# WARP_SHARED_TOKENS=shared_team_token_1,shared_team_token_2,shared_team_token_3

# 匿名token（最低优先级）- 最后的后备方案
# 如果不配置，系统会使用内置的匿名token
# WARP_ANONYMOUS_TOKEN=anonymous_fallback_token

# ==================== Token优先级说明 ====================
# 系统会按以下顺序选择token：
# 1. PERSONAL (个人token) - 最高优先级
#    - 从 WARP_REFRESH_TOKEN 读取单个token
#    - 从 WARP_PERSONAL_TOKENS 读取多个tokens
#    - 同优先级内采用轮询(round-robin)策略
#
# 2. SHARED (共享token) - 中等优先级
#    - 从 WARP_SHARED_TOKENS 读取
#    - 当所有个人token失败时使用
#    - 同优先级内采用轮询策略
#
# 3. ANONYMOUS (匿名token) - 最低优先级
#    - 从 WARP_ANONYMOUS_TOKEN 读取，或使用内置token
#    - 作为最后的后备方案
#    - 确保服务始终可用

# ==================== 故障处理机制 ====================
# - 自动故障转移：token失败时自动切换到下一个可用token
# - 失败计数：每个token最多允许3次失败
# - 自动禁用：失败3次后token会被自动禁用
# - 自动恢复：支持手动或定期恢复失败的token
# - 健康监控：实时监控所有token的健康状态

# ==================== 使用建议 ====================
# 1. 个人使用：
#    - 配置 WARP_REFRESH_TOKEN 即可
#    - 系统会自动使用内置匿名token作为后备
#
# 2. 小团队（2-5人）：
#    - 配置 WARP_PERSONAL_TOKENS 包含所有成员的token
#    - 可选配置 WARP_SHARED_TOKENS 作为共享池
#
# 3. 大团队（5+人）：
#    - 配置 WARP_PERSONAL_TOKENS 包含核心成员的token
#    - 配置 WARP_SHARED_TOKENS 包含团队共享token
#    - 配置 WARP_ANONYMOUS_TOKEN 作为最后后备
#
# 4. 高可用部署：
#    - 配置尽可能多的tokens
#    - 定期监控token健康状态
#    - 及时更换失效的tokens

# ==================== 获取Token方法 ====================
# 1. 从Warp应用中获取个人refresh token
# 2. 从团队管理员获取共享token
# 3. 使用内置匿名token（无需配置）

# ==================== 配置验证 ====================
# 运行测试脚本验证配置：
# uv run python test_token_pool.py
#
# 查看token池状态：
# 启动服务后，日志会显示token池的初始化信息

# ==================== 示例配置 ====================
# 以下是一个完整的多token配置示例（请替换为实际的token）：

# 个人账号tokens（3个）
# WARP_REFRESH_TOKEN=AMf-vBxSRmdh_personal_account_1
# WARP_PERSONAL_TOKENS=AMf-vBxSRmdh_personal_account_2,AMf-vBxSRmdh_personal_account_3

# 团队共享tokens（2个）
# WARP_SHARED_TOKENS=AMf-vBxSRmdh_team_shared_1,AMf-vBxSRmdh_team_shared_2

# 匿名后备token（1个，可选）
# WARP_ANONYMOUS_TOKEN=AMf-vBxSRmdh_anonymous_fallback

# 这样配置后，系统会：
# 1. 优先轮换使用3个个人tokens
# 2. 个人tokens都失败后，使用2个共享tokens
# 3. 所有tokens都失败后，使用匿名token或内置token
# 4. 总共有6个tokens可用，大大提高了可用性和负载能力

